package com.xemantic.ai.tool.schema.test

import com.xemantic.ai.tool.schema.meta.Description
import com.xemantic.ai.tool.schema.meta.Pattern
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.InternalSerializationApi
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.Serializer
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.buildSerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * A monetary amount.
 *
 * Note: this interface will be implemented differently on each platform.
 * In case of `jvm`, it will use `java.math.BigDecimal`, for all the other
 * platforms it will use `com.ionspin.kotlin.bignum.decimal.BigDecimal`.
 *
 * This class represents a typical use case for our test cases.
 */
@Pattern("^-?[0-9]+\\.[0-9]{2}?\$")
@Description("A monetary amount")
@Serializable(MoneySerializer::class)
interface Money {
  operator fun plus(amount: Money): Money
  operator fun compareTo(other: Money): Int
}

expect fun Money(amount: String): Money

// It's a hack to autogenerate a serializer which will retain annotations of serialized class
@OptIn(ExperimentalSerializationApi::class)
@Serializer(forClass = Money::class)
private object AutoGeneratedMoneySerializer

object MoneySerializer : KSerializer<Money> {

  @OptIn(InternalSerializationApi::class, ExperimentalSerializationApi::class)
  override val descriptor = buildSerialDescriptor(
    serialName = AutoGeneratedMoneySerializer.descriptor.serialName,
    kind = PrimitiveKind.STRING
  ) {
    annotations = AutoGeneratedMoneySerializer.descriptor.annotations
  }

  override fun serialize(encoder: Encoder, value: Money) {
    encoder.encodeString(value.toString())
  }

  override fun deserialize(
    decoder: Decoder
  ) = Money(decoder.decodeString())

}
